options:
	youngHeapThreshold: 2

function getFiles():: strings:
	loop all files of dir path "plugins/Skript/scripts":
		if extension of loop-value != "gs":
			continue 
		add normalized of loop-value to {_files::*}
	return {_files::*}

function compileFile(file: string):

	loop getFiles():
		set {GS::uuid} to initFile()
		set {_file} to file({GS::uuid})
		loop getLines({_file}, false):
			tokenizeLine(loop-value)
		if mod(loop-counter, 5) = 0:
			deleteYoungHeap()

function deleteYoungHeap():
	loop {GS::heap::young::*}:
		set {_expr} to loop-index
		set {_timesUsed} to loop-value
		
		delete {GS::heap::young::%{_expr}%}

		# Mess around with that value and see which preforms the best
		if {_timesUsed} <= {@youngHeapThreshold}:
			continue

		if {GS::heap::old::%{_expr}%} is set:
			add {_timesUsed} to {GS::heap::old::%{_expr}%}
			continue
			
		set {GS::heap::old::%{_expr}%} to {_timesUsed}
		
		



# FOR LATER

function compileLine(line: string):
	###

	fn for:
		Handle semicolons
		Remove comments
		Handle brackets

	fn for:
		Tokenizing
		Converting

	👍

	###

function tokenizeLine(line: string):: strings:
	set {_type} to lineInstanceOf({_line})
	if {_type} = "variable":
		tokenizeVariable({_line})
	else if {_type} = "condition":
		tokenizeVariable({_line})
	else if {_type} = "effect":
		tokenizeVariable({_line})
	else if {_type} = "whitespace":

	else if {_type} = "bracket":

	else if {_type} = "comment":

	else:
		throwError("Whoa bud, that's not a thing")

function file(uuid: string):: string:
	return "plugins/Skript/scripts/GreaterSkript/%{_uuid}%.sk"

function initFile(create: boolean = true):: string:
	set {_uuid} to random uuid
	add {_uuid} to {GS::uuids::*}
	if {_create} = true:
		create file path "plugins/Skript/scripts/GreaterSkript/%{_uuid}%.sk"
	return {_uuid}


function primeDirectory():
	delete directory path "plugins/Skript/scripts/GreaterSkript/"

function fileExists(uuid: string):: boolean:
	return whether file path "plugins/Skript/scripts/GreaterSkript/%{_uuid}%.sk" exists

function getLines(file: string, inSkript: boolean = true):: strings:
	if {_inSkript} = true:
		return "plugins/Skript/scripts/%{_file}%"
	return content of file path {_file}

function setLines(file: string, lines: strings):
	set content of file path {_file} to {_lines::*}
