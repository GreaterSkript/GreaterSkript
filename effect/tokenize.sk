function tokenizeEffect(line: string):: strings:

	# Objects represents the not quite tokens, but semi tokens of line
	set {_objects::*} to {_line} split by " " 
	set {_uuid} to {GS::uuid}
	set {_i} to 0

	loop {_objects::*}:
		set {_obj} to loop-value
		
		add 1 to {_i}
		set {_char} to character at {_i} of {_obj}
		set {_nextChar} to character at {_i} + 1 of {_obj}
	
		if all:
			{_char} = "*"
			{_nextChar} = "."
		then:
			set {_var::*} to {_obj} split by "."
			set 

		if {GS::vars::%{_uuid}%::%{_obj}%} is set:
			add ("CALLEDVAR" and "%{_obj}%") to {_tokens::*}

		if {_recording} = "variable":
			
		

		if loop-value doesn't contain ".":
			add loop-value to {_tokens::*}
			continue

		loop (loop-value split by "."):
			add loop-value-2 to {_tokens::*}
			add "." to {_tokens::*}
		
		if last element of {_tokens::*} = ".":
			delete {_tokens::%size of {_tokens::*}%}
			
	return {_tokens::*}

	###

	player.wow() = entity.wow()

	[
		player.wow()
		=
		entity.wow()
	]



	{_var} = player.getWow()

	[
		{_var}
		=
		player
		.
		getHow()
	]
	###
