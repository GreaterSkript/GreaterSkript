using for loops

function getEffects(pullFromFile: boolean = false):: strings:
	if {_pullFromFile} = true:
		return getLines("GreaterSkript/lang/GSeffect.lang")
	else if {GS::heaps::old::1} is set:
		return {GS::heaps::old::*}, and {GS::heaps::young::*} 
	else if {GS::heaps::young::1} is set:
		return {GS::heaps::young::*}
	
	return getEffects(true)


	# How does the heap stuff look in file.sk?

# x = {
#   2,
#   5,
# }
function convertEffects(line: string, fromFile: boolean = false):: string:

	# "whether {_fromFile} != true" == "!{_fromFile}"
	set {_results::*} to getEffects(whether {_fromFile} != true) 

	set {_size} to 0

	#
	#	{_syntaxAndConversion}
	#
	#	Contains a string from either the heaps or directly from a lang file
	#
	#	Formatted as the following:
	#		"%syntax% : %conversion%"
	#

	for each {_syntaxAndConversion} in {_results::*}:

		add 1 to {_size}

		set {_syntaxAndConversion::*} to {_syntaxAndConversion} split by " : "

		set {_syntax::%{_size}%} to {_syntaxAndConversion::1}
		set {_conversions::%{_size}%} to {_syntaxAndConversion::2}



	# Change to while loop maybe if better
	# I would just run through expressions like you are doing yeah
	#No idea if it's a good idea. Okie dokie!

	loop {_syntax::*}:

		set {_i} to loop-index
		set {_syntax} to loop-value

		set {_objs::*} to instanceOf({_line}, {_syntax})

		# Verify if line is an instance of the syntax
		if {_objs::1} = true:
			set {_found} to true
			set {_heapIndex} to "%{_syntax}% : %{_conversions::%{_i}%}%"
			add 1 to {GS::heaps::young::%{_heapIndex}%}
			exit loop
	
	if {_found} != true:
		if {_fromFile} = true:
			throwError()
			return ""
		

		set {queue::*} to 1, 2, 5, 4, 6
		set {_bing::*} to indexes of {queue::*}
		transform (indexes of {_bing::*}) with input + 1

		set {queue::1} to new value
		delete {queue::51}

		return convertEffect({_line}, true)
		



		# I have no idea what all of this meant
		# Are you okay???
		###

		{_name} = methodToGetName ()
		{_index} = ^

		set {_syntaxValues::%{_name}%} to {_index}


		set {_indexOfTheName} to size of {_objs::*} - 2 

		boolean - number of tokens 

		# Pick from list

		{_indexOfName} = first element of {_IOTN} split by "-"
		{_valueOfName} = second element of {_IOTN} split by "-"

		check against {_syntaxValues::*}
		###


# Function instanceOf
# Returns 
# Object[1]    = boolean that says whether its an instance of
# Object[2]    = amount of tokens that there are (amount of expressions in the syntax)
# Object[3...] = everything else is expressions, a string with the following format "index-value"

function instanceOf(line: string, expr: string):: objects:
	set {_exprChars::*} to {_expr} split by ""
	set {_lineChars::*} to {_line} split by ""
	set {_isExpression} to false
	set {_i} to 1
	set {_exprChar} to {_exprChars::%{_i}%}
	set {_char} to {_lineChars::%{_i}%}
	delete {_exprChars::%size of {_exprChars::*}%}
	delete {_lineChars::%size of {_lineChars::*}%}
	set {_token} to ""
	# broadcast size of {_exprChars::*}
	# broadcast size of {_lineChars::*}
	# broadcast {_exprChars::*}
	# broadcast ""
	# broadcast {_lineChars::*}
	
	while true = true:

		if any:
			{_i} > 1000
			{_iExpr} > 1000
		then:
			# broadcast {_i}
			# broadcast {_iExpr}
			# broadcast "whoa"
			return false

		if {_exprChar} = "%%":
			set {_isExpression} to true
			set {_iExpr} to {_iExpr} ? {_i}
			while {_gotNextChar} != true:
				add 1 to {_iExpr}
				if {_exprChars::%{_iExpr}%} = "%%":
					add 1 to {_iExpr}
					set {_exprChar} to {_exprChars::%{_iExpr}%}
					set {_gotNextChar} to true
			delete {_gotNextChar}

			add {_char} to {_token}

			add 1 to {_i}
			set {_char} to {_lineChars::%{_i}%}
			continue

		else if {_isExpression} = true:
			# broadcast "isExpression"


			if {_checkNext} = true:
				if {_char} != {_exprChar}:
					# broadcast "char no exprchar in check"
					# broadcast "%{_exprChars::%{_iExpr}%}% - %{_iExpr}%"
					# broadcast "%{_lineChars::%{_i}%}% - %{_i}%"					
					# broadcast {_isExpression}
					return false
				add 1 to {_i}
				add 1 to {_iExpr}
				set {_char} to {_lineChars::%{_i}%}
				set {_exprChar} to {_exprChars::%{_iExpr}%}
				continue
				
			if {_char} = {_exprChar}:
				set {_checkNext} to true
				# broadcast {_char}
				# broadcast {_exprChar}				

				add 1 to {_i}
				add 1 to {_iExpr}
				set {_char} to {_lineChars::%{_i}%}
				set {_exprChar} to {_exprChars::%{_iExpr}%}
				set {_isExpression} to false
				delete {_checkNext}

				# broadcast {_token}
				add 1 to {_tokens}
				add "%{_tokens}%-%{_token}%" to {_tokens::*}
				set {_token} to ""

				continue
			
			add {_char} to {_token}

			# broadcast {_char}
			# broadcast {_exprChar}		

			add 1 to {_i}
			set {_char} to {_lineChars::%{_i}%}
			continue

		else:
			add 1 to {_iExpr}
			set {_exprChar} to {_exprChars::%{_iExpr}%}			

		add 1 to {_i}
		set {_char} to {_lineChars::%{_i}%}

		# broadcast {_char}
		# broadcast {_exprChar}
		# broadcast ""

		if {_exprChar} = "%%":
			set {_isExpression} to true
			set {_iExpr} to {_iExpr} ? {_i}
			while {_gotNextChar} != true:
				add 1 to {_iExpr}
				if {_exprChars::%{_iExpr}%} = "%%":
					add 1 to {_iExpr}
					set {_exprChar} to {_exprChars::%{_iExpr}%}
					set {_gotNextChar} to true
			delete {_gotNextChar}

			add {_char} to {_token}

			add 1 to {_i}
			set {_char} to {_lineChars::%{_i}%}
			continue

		if "%{_char}%" != "%{_exprChar}%":
			# broadcast "char no exprchar"
			# broadcast "%{_exprChars::%{_iExpr}%}% - %{_iExpr}%"
			# broadcast "%{_lineChars::%{_i}%}% - %{_i}%"		
			# broadcast {_isExpression}
			return false

		if {_lineChars::%{_i}%} isn't set:
			return true, and {_tokens::*}
		


###
function convertEffect(tokens: strings):: string:

	loop {_tokens::*}:
		set {_token} to loop-value
		
		if {_isProperty} = true:
			set {_isProperty} to false

			if {_token} doesn't end with "()":
				throwError("Unknown property %{_token}%")
				return join {_tokens::*} by " " 

			replace "()" with "" in {_token}
			set {_token} to "(%{_token}% of %{_prevToken}%)"
			delete {_converted::%size of {_converted::*}%}

		if {_token} = "var":
			set {_token} to "set"
			
		else if {_token} = "++":

			# i should change this later down 
			# the add 1 to doesnt always work with things. ): i dont know why, i just remember theres a couple things that dont support adding.
			# AND setting is faster parse.
			set {_token} to "add 1 to"

		else if {_token} = "--":
			set {_token} to "remove 1 from"

		else if {_token} = "=":
			set {_token} to "to"

		else if {_token} = ".":
			set {_isProperty} to true
			continue
		
		set {_prevToken} to {_token}
		add "%{_token}% " to {_converted::*}

	return join {_converted::*} by ""



var entity =

entity.get ()


{vars::%event%::*} [
	isList-entity
	lol
	
	entity["wow!"][1]

	{entity::*}

	example::*
	example:1
	example::2
]



###

